#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <stdio.h>
#include "libshell.h"

int strings_compare(char *s1, const char *s2);
int print_char(char c);
void print_string(char *s);
int str_ncmp(char *s1, char *s2, int n);
int str_len(char *s);
int find_char(char *s, char c);
char *get_env(char *name, char **env);
char *concat_strings(char *dest, const char *src);

int main(__attribute__((unused)) int ac, __attribute__((unused)) char **av, char **env)
{
  pid_t pid;
  char **exec_argv;
  int status; 
  char *read_str;
  /*  char *array_element;
      int i,j;*/
  int i;
  char *conc;

  while(1)
    {
      print_char('$');
      read_str = read_line(0);
      if(read_str == NULL)
	{
	  return 1;
	}
      exec_argv= string_split(read_str, ' ');
      if(exec_argv == NULL)
	{
	  free(read_str);
	  return 1;
	}

      /*printf("comp exit w %s\n", exec_argv[0]);*/

      if(strings_compare("exit", exec_argv[0]) == 0 )
	{break;
	}      
      /*printf("nop\n");*/

     else if(strings_compare("env", exec_argv[0]) == 0 )
	{
	  /* for(i = 0; env[i]!= NULL; i++)
	    {
	      if(i != 0)
		{
		  print_char('\n');
		}
	      array_element = env[i];
	      
	      for(j = 0; array_element[j]!= '\0'; j++)
		{ 
		  
		   do something with exec_argv[i][j];
		  
		  print_char(array_element[j]); 
		  
		}
	    }*/
	  for(i = 0; env[i]!= NULL; i++)
	    {
	      if(i != 0)
		{
		  print_char('\n');
		} 
	      print_string(env[i]);
	    }
	}

     else if(strings_compare("echo", exec_argv[0]) == 0 )
	{
	  
	  conc = concat_strings("/bin/",exec_argv[0]);
	 
	  execve(conc, exec_argv, env);
	}
      else  if((pid = fork()) == -1)
	{
	  perror("fork");
	  return 1;
	
      
      if(pid == 0)
	{
	  execve(exec_argv[0], exec_argv, env);
	}
      else
	{
	  wait(&status);
	  printf("Child process terminated\n");
	}
    }
    }
  /* printf("bye\n");*/
  free(read_str);
  free(exec_argv);
  return 0;
}



/*function that compares two strings*/
int strings_compare(char *s1, const char *s2){
  int s3=0;
  int  i;
  for(i=0; s2[i]!='\0'|| s1[i]!='\0'; i++){
    s3 = s1[i] - s2[i];
    if(s3!=0){
      break;
    }

  }
  return s3;
}

int str_ncmp(char *s1, char *s2, int n)
{
  int i, s3;
  s3 = 0;
  for(i = 0; i<n && s1[i]!='\0'; i++)
    {
      s3 = s1[i] - s2[i];
      if(s3!=0){
	break;
      }
      
    }
  return s3;
}

int str_len(char *s)
{
  int i; 
  i = 0;
  while(s[i]!='\0')
    {
      s++;
    }
  return i;
}

int print_char(char c)
{
  return (write(1, &c, 1));
}

/*print a stfing */
void print_string(char *s)
{
  int i;

  for (i = 0; s[i] !='\0'; i++)
    {
      print_char(s[i]);
    }
}

int find_char(char *s, char c)
{
  int i;
  for (i = 0; s[i]!='\0'; i++)
    {
      if(s[i] == c)
	{
	  return i;
	}
    }
  return -1;
}

char *get_env(char *name, char **env)
 {
   int n, i;
   
   for (i = 0; env[i] != NULL; i++)
     {
       if (str_ncmp(env[i], name, str_len(name)) == 0 )
       {
	 n = find_char(env[i], '=');
	 return env[i] + n + 1;
       }
     }
   return "";
 }

/*concatenates two strings*/
char *concat_strings(char *dest, const char *src){
  int i=0, dest_len;
  while(dest[i]!= '\0'){
    i++;
  }

  while(src[src_len] != '\0') /* find length of string */
    {
      src_len++;
    } 
  for (i = src_len; i > 0; i--)
  
  for (j=0; src[j]!= 'o';i++, j++){
    printf("%c\n",src[j]);
  
    printf("%c\n",dest[i-1]);
    dest[i] = src[j];
    
    
  }

  dest[i] ='\0';
  return dest;
}
